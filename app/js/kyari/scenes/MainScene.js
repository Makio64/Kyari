var MainScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MainScene = (function(_super) {
  __extends(MainScene, _super);

  function MainScene() {
    this.onWheelsLoad = __bind(this.onWheelsLoad, this);
    this.onWaterLoad = __bind(this.onWaterLoad, this);
    this.onCrystalLoad = __bind(this.onCrystalLoad, this);
    this.onBaseLoad = __bind(this.onBaseLoad, this);
    this.onEyeLoad = __bind(this.onEyeLoad, this);
    this.onFaceLoad = __bind(this.onFaceLoad, this);
    this.onDiamondLoad = __bind(this.onDiamondLoad, this);
    var loader;
    this.time = 0;
    this.container = new THREE.Object3D();
    this.container.position.y -= 10;
    Stage3d.add(this.container);
    this.ambientLight = new THREE.AmbientLight(0x222222);
    Stage3d.add(this.ambientLight);
    this.cameraLight = new THREE.PointLight(0xffffff, 1, 400);
    this.cameraLight.position.set(30, 50, 50);
    Stage3d.add(this.cameraLight);
    loader = new THREE.JSONLoader();
    loader.load('./3d/json/baseHD.js', this.onBaseLoad);
    loader = new THREE.JSONLoader();
    loader.load('./3d/json/diamond.js', this.onDiamondLoad);
    loader = new THREE.JSONLoader();
    loader.load('./3d/json/crystal.js', this.onCrystalLoad);
    loader = new THREE.JSONLoader();
    loader.load('./3d/json/waterHD.js', this.onWaterLoad);
    loader = new THREE.JSONLoader();
    loader.load('./3d/json/face.js', this.onFaceLoad);
    loader = new THREE.SceneLoader();
    loader.load('./3d/json/eye.js', this.onEyeLoad);
    loader = new THREE.SceneLoader();
    loader.load('./3d/json/wheels.js', this.onWheelsLoad);
    return;
  }

  MainScene.prototype.onDiamondLoad = function(geometry) {
    var material;
    this.computeGeometry(geometry);
    material = new THREE.MeshBasicMaterial({
      color: 0xffffff
    });
    this.diamond = new THREE.Mesh(geometry, material);
    this.container.add(this.diamond);
  };

  MainScene.prototype.onFaceLoad = function(geometry) {
    var material;
    this.computeGeometry(geometry);
    material = new THREE.MeshBasicMaterial({
      color: 0xffffff,
      wireframe: true
    });
    this.face = new THREE.Mesh(geometry, material);
    this.container.add(this.face);
  };

  MainScene.prototype.onEyeLoad = function(scene) {
    var k, material, o, shader, v, _ref;
    shader = THREE.ShaderLib["normalmap"];
    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
    this.uniforms["tNormal"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/NMAP_eye.png");
    this.uniforms["tSpecular"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/DISP_eye.png");
    this.uniforms["tDiffuse"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/TEXT_eye.png");
    this.uniforms["enableDiffuse"].value = 1;
    this.uniforms["enableSpecular"].value = 1;
    this.uniforms["uNormalScale"].value.x = 2;
    this.uniforms["uNormalScale"].value.y = 2;
    material = new THREE.ShaderMaterial({
      fragmentShader: shader.fragmentShader,
      vertexShader: shader.vertexShader,
      uniforms: this.uniforms,
      lights: true,
      transparent: false,
      fog: false,
      color: 0xffffff
    });
    _ref = scene.objects;
    for (k in _ref) {
      v = _ref[k];
      o = v;
      if (o.name === 'paupiereDown_Uv') {
        this.closeDown = o;
      } else if (o.name === 'paupiereUp_Uv') {
        this.closeUp = o;
      } else {
        this.eye = o;
      }
      this.computeGeometry(o.geometry);
      o.material = material;
      this.container.add(o);
    }
  };

  MainScene.prototype.onBaseLoad = function(geometry) {
    var material, shader;
    this.computeGeometry(geometry);
    shader = THREE.ShaderLib["normalmap"];
    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
    this.uniforms["tNormal"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/normalBase2048.png");
    this.uniforms["tSpecular"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/specularBase2048.png");
    this.uniforms["tDiffuse"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/base1024.png");
    this.uniforms["enableDiffuse"].value = 1;
    this.uniforms["enableSpecular"].value = 1;
    this.uniforms["uNormalScale"].value.x = 2;
    this.uniforms["uNormalScale"].value.y = 2;
    material = new THREE.ShaderMaterial({
      fragmentShader: shader.fragmentShader,
      vertexShader: shader.vertexShader,
      uniforms: this.uniforms,
      lights: true,
      transparent: false,
      fog: false,
      color: 0xffffff
    });
    this.mesh = new THREE.Mesh(geometry, material);
    this.container.add(this.mesh);
  };

  MainScene.prototype.onCrystalLoad = function(geometry) {
    var material;
    this.computeGeometry(geometry);
    this.crystalUniforms = {
      "tDiffuse": {
        type: "t",
        value: THREE.ImageUtils.loadTexture("./3d/textures/HD/crystal.jpg")
      },
      "uGlobalTime": {
        type: "f",
        value: 0.0
      },
      "uOpacity": {
        type: "f",
        value: .5
      }
    };
    material = new THREE.ShaderMaterial({
      fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float uGlobalTime;", "uniform float uOpacity;", "varying vec2 vUv;", "varying vec3 vPos;", "void main() {", "float ratio = vPos.x - .5;", "vec4 texture = texture2D( tDiffuse, vUv +cos(ratio-uGlobalTime*.04)*.4);", "float color = cos(ratio-uGlobalTime*.04)*.5;", "gl_FragColor = vec4( texture.rgb + color, uOpacity);", "}"].join("\n"),
      vertexShader: ["uniform float uGlobalTime;", "varying vec2 vUv;", "varying vec3 vPos;", "void main() {", "vPos = position;", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join('\n'),
      uniforms: this.crystalUniforms,
      lights: false,
      transparent: true,
      fog: false,
      color: 0xffffff
    });
    this.crystal = new THREE.Mesh(geometry, material);
    this.container.add(this.crystal);
  };

  MainScene.prototype.onWaterLoad = function(geometry) {
    var material;
    this.computeGeometry(geometry);
    this.waterUniforms = {
      "tDiffuse": {
        type: "t",
        value: THREE.ImageUtils.loadTexture("./3d/textures/HD/water.jpg")
      },
      "uGlobalTime": {
        type: "f",
        value: 0.0
      },
      "amplitude": {
        type: "f",
        value: .8
      }
    };
    material = new THREE.ShaderMaterial({
      fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float uGlobalTime;", "varying vec2 vUv;", "varying vec3 vPos;", "void main() {", "float ratio = -vPos.y;", "float alpha = min(vPos.y/5.0,.15);", "vec4 texture = texture2D( tDiffuse, vUv +cos(ratio-uGlobalTime*.01)*.3);", "float color = cos(ratio-uGlobalTime*.04)*.35;", "gl_FragColor = vec4( texture.rgb + color, alpha);", "}"].join("\n"),
      vertexShader: ["uniform float uGlobalTime;", "uniform float amplitude;", "varying vec3 vNormal;", "varying vec2 vUv;", "varying vec3 vPos;", "void main() {", "vNormal = normal;", "vUv = uv;", "vec3 newPosition = position + normal * vec3(cos(uGlobalTime/70.0+position.y*.4) * amplitude);", "vPos = newPosition;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );", "}"].join('\n'),
      uniforms: this.waterUniforms,
      lights: false,
      transparent: true,
      fog: false,
      color: 0xffffff
    });
    this.water = new THREE.Mesh(geometry, material);
    this.container.add(this.water);
  };

  MainScene.prototype.onWheelsLoad = function(scene) {
    var k, material, o, shader, v, _ref;
    shader = THREE.ShaderLib["normalmap"];
    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
    this.uniforms["tNormal"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/130331_NMAP_roues2048.png");
    this.uniforms["tSpecular"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/130331_DISP_roues2048.png");
    this.uniforms["tDiffuse"].value = THREE.ImageUtils.loadTexture("./3d/textures/HD/130331_TEXT_roues2048_002.png");
    this.uniforms["enableDiffuse"].value = 1;
    this.uniforms["enableSpecular"].value = 1;
    material = new THREE.ShaderMaterial({
      fragmentShader: shader.fragmentShader,
      vertexShader: shader.vertexShader,
      uniforms: this.uniforms,
      lights: true,
      transparent: false,
      fog: false,
      color: 0xffffff
    });
    this.wheelsVertical = [];
    this.wheelsHorizontal = [];
    _ref = scene.objects;
    for (k in _ref) {
      v = _ref[k];
      o = v;
      this.computeGeometry(o.geometry);
      o.material = material;
      this.container.add(o);
      if (/_y_/i.test(k)) {
        this.wheelsVertical.push(o);
      } else {
        this.wheelsHorizontal.push(o);
      }
    }
  };

  MainScene.prototype.computeGeometry = function(geometry) {
    geometry.computeBoundingSphere();
    geometry.computeFaceNormals();
    geometry.computeVertexNormals();
    geometry.computeVertexNormals();
    geometry.computeTangents();
    geometry.computeMorphNormals();
    geometry.verticesNeedUpdate = true;
    geometry.normalsNeedUpdate = true;
  };

  MainScene.prototype.update = function(dt) {
    var w, _i, _j, _len, _len1, _ref, _ref1;
    this.time += dt;
    this.container.rotation.y += 0.005;
    if (this.wheelsVertical) {
      _ref = this.wheelsVertical;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        w = _ref[_i];
        w.rotation.y += 0.003;
      }
      _ref1 = this.wheelsHorizontal;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        w = _ref1[_j];
        w.rotation.x += 0.003;
      }
    }
    if (this.closeDown) {
      this.closeDown.rotation.x = Math.abs(Math.sin(this.time / 1000) * .7);
      this.closeUp.rotation.x = -Math.abs(Math.sin(this.time / 1000) * .7);
    }
    if (this.crystalUniforms) {
      this.crystalUniforms["uGlobalTime"].value += dt / 30;
    }
    if (this.waterUniforms) {
      this.waterUniforms["uGlobalTime"].value += dt / 30;
    }
  };

  return MainScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,